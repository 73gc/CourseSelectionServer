// Code generated by Kitex v0.3.2. DO NOT EDIT.

package teacherservice

import (
	"context"
	server0 "courseselection/kitex_gen/Server"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ShowCourseToTeacher(ctx context.Context, req *server0.TeacherQueryCourseRequest, callOptions ...callopt.Option) (r *server0.TeacherQueryCourseResponse, err error)
	ShowStudentInfo(ctx context.Context, req *server0.ShowStudentInfoRequest, callOptions ...callopt.Option) (r *server0.ShowStudentInfoResponse, err error)
	InputScore(ctx context.Context, req *server0.TeacherInputScoreRequest, callOptions ...callopt.Option) (r *server0.TeacherInputScoreResponse, err error)
	ModifyShowCourse(ctx context.Context, req *server0.TeacherQueryCourseRequest, callOptions ...callopt.Option) (r *server0.TeacherQueryCourseResponse, err error)
	ModifyShowStudent(ctx context.Context, req *server0.ShowStudentInfoRequest, callOptions ...callopt.Option) (r *server0.ShowStudentInfoResponse, err error)
	ModifyScore(ctx context.Context, req *server0.TeacherModifyScoreRequest, callOptions ...callopt.Option) (r *server0.TeacherModifyScoreResponse, err error)
	QueryCourse(ctx context.Context, req *server0.TeacherQueryCourseRequest, callOptions ...callopt.Option) (r *server0.TeacherQueryCourseResponse, err error)
	ShowStudentScore(ctx context.Context, req *server0.ShowStudentInfoRequest, callOptions ...callopt.Option) (r *server0.ShowStudentInfoResponse, err error)
	ShowCourseSelection(ctx context.Context, req *server0.TeacherQueryCourseRequest, callOptions ...callopt.Option) (r *server0.TeacherQueryCourseResponse, err error)
	StudentCourseSelection(ctx context.Context, req *server0.ShowStudentInfoRequest, callOptions ...callopt.Option) (r *server0.ShowStudentInfoResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kTeacherServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kTeacherServiceClient struct {
	*kClient
}

func (p *kTeacherServiceClient) ShowCourseToTeacher(ctx context.Context, req *server0.TeacherQueryCourseRequest, callOptions ...callopt.Option) (r *server0.TeacherQueryCourseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ShowCourseToTeacher(ctx, req)
}

func (p *kTeacherServiceClient) ShowStudentInfo(ctx context.Context, req *server0.ShowStudentInfoRequest, callOptions ...callopt.Option) (r *server0.ShowStudentInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ShowStudentInfo(ctx, req)
}

func (p *kTeacherServiceClient) InputScore(ctx context.Context, req *server0.TeacherInputScoreRequest, callOptions ...callopt.Option) (r *server0.TeacherInputScoreResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.InputScore(ctx, req)
}

func (p *kTeacherServiceClient) ModifyShowCourse(ctx context.Context, req *server0.TeacherQueryCourseRequest, callOptions ...callopt.Option) (r *server0.TeacherQueryCourseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ModifyShowCourse(ctx, req)
}

func (p *kTeacherServiceClient) ModifyShowStudent(ctx context.Context, req *server0.ShowStudentInfoRequest, callOptions ...callopt.Option) (r *server0.ShowStudentInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ModifyShowStudent(ctx, req)
}

func (p *kTeacherServiceClient) ModifyScore(ctx context.Context, req *server0.TeacherModifyScoreRequest, callOptions ...callopt.Option) (r *server0.TeacherModifyScoreResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ModifyScore(ctx, req)
}

func (p *kTeacherServiceClient) QueryCourse(ctx context.Context, req *server0.TeacherQueryCourseRequest, callOptions ...callopt.Option) (r *server0.TeacherQueryCourseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryCourse(ctx, req)
}

func (p *kTeacherServiceClient) ShowStudentScore(ctx context.Context, req *server0.ShowStudentInfoRequest, callOptions ...callopt.Option) (r *server0.ShowStudentInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ShowStudentScore(ctx, req)
}

func (p *kTeacherServiceClient) ShowCourseSelection(ctx context.Context, req *server0.TeacherQueryCourseRequest, callOptions ...callopt.Option) (r *server0.TeacherQueryCourseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ShowCourseSelection(ctx, req)
}

func (p *kTeacherServiceClient) StudentCourseSelection(ctx context.Context, req *server0.ShowStudentInfoRequest, callOptions ...callopt.Option) (r *server0.ShowStudentInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.StudentCourseSelection(ctx, req)
}
