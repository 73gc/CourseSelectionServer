// Code generated by Kitex v0.3.2. DO NOT EDIT.

package teacherservice

import (
	"context"
	server0 "courseselection/kitex_gen/Server"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return teacherServiceServiceInfo
}

var teacherServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "TeacherService"
	handlerType := (*server0.TeacherService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ShowCourseToTeacher":    kitex.NewMethodInfo(showCourseToTeacherHandler, newTeacherServiceShowCourseToTeacherArgs, newTeacherServiceShowCourseToTeacherResult, false),
		"ShowStudentInfo":        kitex.NewMethodInfo(showStudentInfoHandler, newTeacherServiceShowStudentInfoArgs, newTeacherServiceShowStudentInfoResult, false),
		"InputScore":             kitex.NewMethodInfo(inputScoreHandler, newTeacherServiceInputScoreArgs, newTeacherServiceInputScoreResult, false),
		"ModifyShowCourse":       kitex.NewMethodInfo(modifyShowCourseHandler, newTeacherServiceModifyShowCourseArgs, newTeacherServiceModifyShowCourseResult, false),
		"ModifyShowStudent":      kitex.NewMethodInfo(modifyShowStudentHandler, newTeacherServiceModifyShowStudentArgs, newTeacherServiceModifyShowStudentResult, false),
		"ModifyScore":            kitex.NewMethodInfo(modifyScoreHandler, newTeacherServiceModifyScoreArgs, newTeacherServiceModifyScoreResult, false),
		"QueryCourse":            kitex.NewMethodInfo(queryCourseHandler, newTeacherServiceQueryCourseArgs, newTeacherServiceQueryCourseResult, false),
		"ShowStudentScore":       kitex.NewMethodInfo(showStudentScoreHandler, newTeacherServiceShowStudentScoreArgs, newTeacherServiceShowStudentScoreResult, false),
		"ShowCourseSelection":    kitex.NewMethodInfo(showCourseSelectionHandler, newTeacherServiceShowCourseSelectionArgs, newTeacherServiceShowCourseSelectionResult, false),
		"StudentCourseSelection": kitex.NewMethodInfo(studentCourseSelectionHandler, newTeacherServiceStudentCourseSelectionArgs, newTeacherServiceStudentCourseSelectionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "server",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func showCourseToTeacherHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.TeacherServiceShowCourseToTeacherArgs)
	realResult := result.(*server0.TeacherServiceShowCourseToTeacherResult)
	success, err := handler.(server0.TeacherService).ShowCourseToTeacher(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTeacherServiceShowCourseToTeacherArgs() interface{} {
	return server0.NewTeacherServiceShowCourseToTeacherArgs()
}

func newTeacherServiceShowCourseToTeacherResult() interface{} {
	return server0.NewTeacherServiceShowCourseToTeacherResult()
}

func showStudentInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.TeacherServiceShowStudentInfoArgs)
	realResult := result.(*server0.TeacherServiceShowStudentInfoResult)
	success, err := handler.(server0.TeacherService).ShowStudentInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTeacherServiceShowStudentInfoArgs() interface{} {
	return server0.NewTeacherServiceShowStudentInfoArgs()
}

func newTeacherServiceShowStudentInfoResult() interface{} {
	return server0.NewTeacherServiceShowStudentInfoResult()
}

func inputScoreHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.TeacherServiceInputScoreArgs)
	realResult := result.(*server0.TeacherServiceInputScoreResult)
	success, err := handler.(server0.TeacherService).InputScore(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTeacherServiceInputScoreArgs() interface{} {
	return server0.NewTeacherServiceInputScoreArgs()
}

func newTeacherServiceInputScoreResult() interface{} {
	return server0.NewTeacherServiceInputScoreResult()
}

func modifyShowCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.TeacherServiceModifyShowCourseArgs)
	realResult := result.(*server0.TeacherServiceModifyShowCourseResult)
	success, err := handler.(server0.TeacherService).ModifyShowCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTeacherServiceModifyShowCourseArgs() interface{} {
	return server0.NewTeacherServiceModifyShowCourseArgs()
}

func newTeacherServiceModifyShowCourseResult() interface{} {
	return server0.NewTeacherServiceModifyShowCourseResult()
}

func modifyShowStudentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.TeacherServiceModifyShowStudentArgs)
	realResult := result.(*server0.TeacherServiceModifyShowStudentResult)
	success, err := handler.(server0.TeacherService).ModifyShowStudent(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTeacherServiceModifyShowStudentArgs() interface{} {
	return server0.NewTeacherServiceModifyShowStudentArgs()
}

func newTeacherServiceModifyShowStudentResult() interface{} {
	return server0.NewTeacherServiceModifyShowStudentResult()
}

func modifyScoreHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.TeacherServiceModifyScoreArgs)
	realResult := result.(*server0.TeacherServiceModifyScoreResult)
	success, err := handler.(server0.TeacherService).ModifyScore(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTeacherServiceModifyScoreArgs() interface{} {
	return server0.NewTeacherServiceModifyScoreArgs()
}

func newTeacherServiceModifyScoreResult() interface{} {
	return server0.NewTeacherServiceModifyScoreResult()
}

func queryCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.TeacherServiceQueryCourseArgs)
	realResult := result.(*server0.TeacherServiceQueryCourseResult)
	success, err := handler.(server0.TeacherService).QueryCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTeacherServiceQueryCourseArgs() interface{} {
	return server0.NewTeacherServiceQueryCourseArgs()
}

func newTeacherServiceQueryCourseResult() interface{} {
	return server0.NewTeacherServiceQueryCourseResult()
}

func showStudentScoreHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.TeacherServiceShowStudentScoreArgs)
	realResult := result.(*server0.TeacherServiceShowStudentScoreResult)
	success, err := handler.(server0.TeacherService).ShowStudentScore(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTeacherServiceShowStudentScoreArgs() interface{} {
	return server0.NewTeacherServiceShowStudentScoreArgs()
}

func newTeacherServiceShowStudentScoreResult() interface{} {
	return server0.NewTeacherServiceShowStudentScoreResult()
}

func showCourseSelectionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.TeacherServiceShowCourseSelectionArgs)
	realResult := result.(*server0.TeacherServiceShowCourseSelectionResult)
	success, err := handler.(server0.TeacherService).ShowCourseSelection(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTeacherServiceShowCourseSelectionArgs() interface{} {
	return server0.NewTeacherServiceShowCourseSelectionArgs()
}

func newTeacherServiceShowCourseSelectionResult() interface{} {
	return server0.NewTeacherServiceShowCourseSelectionResult()
}

func studentCourseSelectionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.TeacherServiceStudentCourseSelectionArgs)
	realResult := result.(*server0.TeacherServiceStudentCourseSelectionResult)
	success, err := handler.(server0.TeacherService).StudentCourseSelection(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTeacherServiceStudentCourseSelectionArgs() interface{} {
	return server0.NewTeacherServiceStudentCourseSelectionArgs()
}

func newTeacherServiceStudentCourseSelectionResult() interface{} {
	return server0.NewTeacherServiceStudentCourseSelectionResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ShowCourseToTeacher(ctx context.Context, req *server0.TeacherQueryCourseRequest) (r *server0.TeacherQueryCourseResponse, err error) {
	var _args server0.TeacherServiceShowCourseToTeacherArgs
	_args.Req = req
	var _result server0.TeacherServiceShowCourseToTeacherResult
	if err = p.c.Call(ctx, "ShowCourseToTeacher", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowStudentInfo(ctx context.Context, req *server0.ShowStudentInfoRequest) (r *server0.ShowStudentInfoResponse, err error) {
	var _args server0.TeacherServiceShowStudentInfoArgs
	_args.Req = req
	var _result server0.TeacherServiceShowStudentInfoResult
	if err = p.c.Call(ctx, "ShowStudentInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InputScore(ctx context.Context, req *server0.TeacherInputScoreRequest) (r *server0.TeacherInputScoreResponse, err error) {
	var _args server0.TeacherServiceInputScoreArgs
	_args.Req = req
	var _result server0.TeacherServiceInputScoreResult
	if err = p.c.Call(ctx, "InputScore", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ModifyShowCourse(ctx context.Context, req *server0.TeacherQueryCourseRequest) (r *server0.TeacherQueryCourseResponse, err error) {
	var _args server0.TeacherServiceModifyShowCourseArgs
	_args.Req = req
	var _result server0.TeacherServiceModifyShowCourseResult
	if err = p.c.Call(ctx, "ModifyShowCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ModifyShowStudent(ctx context.Context, req *server0.ShowStudentInfoRequest) (r *server0.ShowStudentInfoResponse, err error) {
	var _args server0.TeacherServiceModifyShowStudentArgs
	_args.Req = req
	var _result server0.TeacherServiceModifyShowStudentResult
	if err = p.c.Call(ctx, "ModifyShowStudent", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ModifyScore(ctx context.Context, req *server0.TeacherModifyScoreRequest) (r *server0.TeacherModifyScoreResponse, err error) {
	var _args server0.TeacherServiceModifyScoreArgs
	_args.Req = req
	var _result server0.TeacherServiceModifyScoreResult
	if err = p.c.Call(ctx, "ModifyScore", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryCourse(ctx context.Context, req *server0.TeacherQueryCourseRequest) (r *server0.TeacherQueryCourseResponse, err error) {
	var _args server0.TeacherServiceQueryCourseArgs
	_args.Req = req
	var _result server0.TeacherServiceQueryCourseResult
	if err = p.c.Call(ctx, "QueryCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowStudentScore(ctx context.Context, req *server0.ShowStudentInfoRequest) (r *server0.ShowStudentInfoResponse, err error) {
	var _args server0.TeacherServiceShowStudentScoreArgs
	_args.Req = req
	var _result server0.TeacherServiceShowStudentScoreResult
	if err = p.c.Call(ctx, "ShowStudentScore", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowCourseSelection(ctx context.Context, req *server0.TeacherQueryCourseRequest) (r *server0.TeacherQueryCourseResponse, err error) {
	var _args server0.TeacherServiceShowCourseSelectionArgs
	_args.Req = req
	var _result server0.TeacherServiceShowCourseSelectionResult
	if err = p.c.Call(ctx, "ShowCourseSelection", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StudentCourseSelection(ctx context.Context, req *server0.ShowStudentInfoRequest) (r *server0.ShowStudentInfoResponse, err error) {
	var _args server0.TeacherServiceStudentCourseSelectionArgs
	_args.Req = req
	var _result server0.TeacherServiceStudentCourseSelectionResult
	if err = p.c.Call(ctx, "StudentCourseSelection", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
