// Code generated by Kitex v0.3.2. DO NOT EDIT.

package userservice

import (
	"context"
	server0 "courseselection/kitex_gen/Server"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*server0.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Login":          kitex.NewMethodInfo(loginHandler, newUserServiceLoginArgs, newUserServiceLoginResult, false),
		"ChangePassword": kitex.NewMethodInfo(changePasswordHandler, newUserServiceChangePasswordArgs, newUserServiceChangePasswordResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "server",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.UserServiceLoginArgs)
	realResult := result.(*server0.UserServiceLoginResult)
	success, err := handler.(server0.UserService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginArgs() interface{} {
	return server0.NewUserServiceLoginArgs()
}

func newUserServiceLoginResult() interface{} {
	return server0.NewUserServiceLoginResult()
}

func changePasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.UserServiceChangePasswordArgs)
	realResult := result.(*server0.UserServiceChangePasswordResult)
	success, err := handler.(server0.UserService).ChangePassword(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceChangePasswordArgs() interface{} {
	return server0.NewUserServiceChangePasswordArgs()
}

func newUserServiceChangePasswordResult() interface{} {
	return server0.NewUserServiceChangePasswordResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Login(ctx context.Context, req *server0.LoginRequest) (r *server0.LoginResponse, err error) {
	var _args server0.UserServiceLoginArgs
	_args.Req = req
	var _result server0.UserServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangePassword(ctx context.Context, req *server0.ChangePasswordRequenst) (r *server0.ChangePasswordReponse, err error) {
	var _args server0.UserServiceChangePasswordArgs
	_args.Req = req
	var _result server0.UserServiceChangePasswordResult
	if err = p.c.Call(ctx, "ChangePassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
