// Code generated by Kitex v0.3.2. DO NOT EDIT.

package studentservice

import (
	"context"
	server0 "courseselection/kitex_gen/Server"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ShowCourse(ctx context.Context, req *server0.StudentShowCourseRequest, callOptions ...callopt.Option) (r *server0.StudentShowCourseReponse, err error)
	SelectCourse(ctx context.Context, req *server0.SelectCourseRequest, callOptions ...callopt.Option) (r *server0.SelectCourseResponse, err error)
	QueryScore(ctx context.Context, req *server0.StudentQueryScoreRequest, callOptions ...callopt.Option) (r *server0.StudentQueryScoreResponse, err error)
	QuerySelection(ctx context.Context, req *server0.StudentQuerySelectionRequest, callOptions ...callopt.Option) (r *server0.StudentQuerySelectionResponse, err error)
	EvaluateRequest(ctx context.Context, req *server0.StudentEvaluateRequest, callOptions ...callopt.Option) (r *server0.StudentEvaluateResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kStudentServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kStudentServiceClient struct {
	*kClient
}

func (p *kStudentServiceClient) ShowCourse(ctx context.Context, req *server0.StudentShowCourseRequest, callOptions ...callopt.Option) (r *server0.StudentShowCourseReponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ShowCourse(ctx, req)
}

func (p *kStudentServiceClient) SelectCourse(ctx context.Context, req *server0.SelectCourseRequest, callOptions ...callopt.Option) (r *server0.SelectCourseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SelectCourse(ctx, req)
}

func (p *kStudentServiceClient) QueryScore(ctx context.Context, req *server0.StudentQueryScoreRequest, callOptions ...callopt.Option) (r *server0.StudentQueryScoreResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryScore(ctx, req)
}

func (p *kStudentServiceClient) QuerySelection(ctx context.Context, req *server0.StudentQuerySelectionRequest, callOptions ...callopt.Option) (r *server0.StudentQuerySelectionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QuerySelection(ctx, req)
}

func (p *kStudentServiceClient) EvaluateRequest(ctx context.Context, req *server0.StudentEvaluateRequest, callOptions ...callopt.Option) (r *server0.StudentEvaluateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.EvaluateRequest(ctx, req)
}
