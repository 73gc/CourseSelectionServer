// Code generated by Kitex v0.3.2. DO NOT EDIT.

package adminservice

import (
	"context"
	server0 "courseselection/kitex_gen/Server"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	QueryStudentInfo(ctx context.Context, callOptions ...callopt.Option) (r *server0.AdminQueryStudentInfoResponse, err error)
	QueryTeacherInfo(ctx context.Context, callOptions ...callopt.Option) (r *server0.AdminQueryTeacherInfoResponse, err error)
	QueryCourseInfo(ctx context.Context, callOptions ...callopt.Option) (r *server0.AdminQueryCourseInfoResponse, err error)
	AddStudent(ctx context.Context, req *server0.AdminAddStudentInfoRequest, callOptions ...callopt.Option) (r *server0.AdminAddStudentInfoResponse, err error)
	DeleteStudent(ctx context.Context, req *server0.AdminDeleteStudentInfoRequest, callOptions ...callopt.Option) (r *server0.AdminDeleteStudentInfoResponse, err error)
	AddTeacher(ctx context.Context, req *server0.AdminAddTeacherInfoRequest, callOptions ...callopt.Option) (r *server0.AdminAddTeacherInfoResponse, err error)
	DeleteTeacher(ctx context.Context, req *server0.AdminDeleteTeacherInfoRequest, callOptions ...callopt.Option) (r *server0.AdminDeleteStudentInfoResponse, err error)
	AddCourse(ctx context.Context, req *server0.AdminAddCourseInfoRequest, callOptions ...callopt.Option) (r *server0.AdminAddCourseInfoResponse, err error)
	DeleteCourse(ctx context.Context, req *server0.AdminDeleteCourseInfoRequest, callOptions ...callopt.Option) (r *server0.AdminDeleteCourseInfoResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kAdminServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAdminServiceClient struct {
	*kClient
}

func (p *kAdminServiceClient) QueryStudentInfo(ctx context.Context, callOptions ...callopt.Option) (r *server0.AdminQueryStudentInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryStudentInfo(ctx)
}

func (p *kAdminServiceClient) QueryTeacherInfo(ctx context.Context, callOptions ...callopt.Option) (r *server0.AdminQueryTeacherInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryTeacherInfo(ctx)
}

func (p *kAdminServiceClient) QueryCourseInfo(ctx context.Context, callOptions ...callopt.Option) (r *server0.AdminQueryCourseInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryCourseInfo(ctx)
}

func (p *kAdminServiceClient) AddStudent(ctx context.Context, req *server0.AdminAddStudentInfoRequest, callOptions ...callopt.Option) (r *server0.AdminAddStudentInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddStudent(ctx, req)
}

func (p *kAdminServiceClient) DeleteStudent(ctx context.Context, req *server0.AdminDeleteStudentInfoRequest, callOptions ...callopt.Option) (r *server0.AdminDeleteStudentInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteStudent(ctx, req)
}

func (p *kAdminServiceClient) AddTeacher(ctx context.Context, req *server0.AdminAddTeacherInfoRequest, callOptions ...callopt.Option) (r *server0.AdminAddTeacherInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddTeacher(ctx, req)
}

func (p *kAdminServiceClient) DeleteTeacher(ctx context.Context, req *server0.AdminDeleteTeacherInfoRequest, callOptions ...callopt.Option) (r *server0.AdminDeleteStudentInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteTeacher(ctx, req)
}

func (p *kAdminServiceClient) AddCourse(ctx context.Context, req *server0.AdminAddCourseInfoRequest, callOptions ...callopt.Option) (r *server0.AdminAddCourseInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddCourse(ctx, req)
}

func (p *kAdminServiceClient) DeleteCourse(ctx context.Context, req *server0.AdminDeleteCourseInfoRequest, callOptions ...callopt.Option) (r *server0.AdminDeleteCourseInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteCourse(ctx, req)
}
