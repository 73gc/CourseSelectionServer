// Code generated by Kitex v0.3.2. DO NOT EDIT.

package adminservice

import (
	"context"
	server0 "courseselection/kitex_gen/Server"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return adminServiceServiceInfo
}

var adminServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "AdminService"
	handlerType := (*server0.AdminService)(nil)
	methods := map[string]kitex.MethodInfo{
		"QueryStudentInfo": kitex.NewMethodInfo(queryStudentInfoHandler, newAdminServiceQueryStudentInfoArgs, newAdminServiceQueryStudentInfoResult, false),
		"QueryTeacherInfo": kitex.NewMethodInfo(queryTeacherInfoHandler, newAdminServiceQueryTeacherInfoArgs, newAdminServiceQueryTeacherInfoResult, false),
		"QueryCourseInfo":  kitex.NewMethodInfo(queryCourseInfoHandler, newAdminServiceQueryCourseInfoArgs, newAdminServiceQueryCourseInfoResult, false),
		"AddStudent":       kitex.NewMethodInfo(addStudentHandler, newAdminServiceAddStudentArgs, newAdminServiceAddStudentResult, false),
		"DeleteStudent":    kitex.NewMethodInfo(deleteStudentHandler, newAdminServiceDeleteStudentArgs, newAdminServiceDeleteStudentResult, false),
		"AddTeacher":       kitex.NewMethodInfo(addTeacherHandler, newAdminServiceAddTeacherArgs, newAdminServiceAddTeacherResult, false),
		"DeleteTeacher":    kitex.NewMethodInfo(deleteTeacherHandler, newAdminServiceDeleteTeacherArgs, newAdminServiceDeleteTeacherResult, false),
		"AddCourse":        kitex.NewMethodInfo(addCourseHandler, newAdminServiceAddCourseArgs, newAdminServiceAddCourseResult, false),
		"DeleteCourse":     kitex.NewMethodInfo(deleteCourseHandler, newAdminServiceDeleteCourseArgs, newAdminServiceDeleteCourseResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "server",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func queryStudentInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*server0.AdminServiceQueryStudentInfoResult)
	success, err := handler.(server0.AdminService).QueryStudentInfo(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAdminServiceQueryStudentInfoArgs() interface{} {
	return server0.NewAdminServiceQueryStudentInfoArgs()
}

func newAdminServiceQueryStudentInfoResult() interface{} {
	return server0.NewAdminServiceQueryStudentInfoResult()
}

func queryTeacherInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*server0.AdminServiceQueryTeacherInfoResult)
	success, err := handler.(server0.AdminService).QueryTeacherInfo(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAdminServiceQueryTeacherInfoArgs() interface{} {
	return server0.NewAdminServiceQueryTeacherInfoArgs()
}

func newAdminServiceQueryTeacherInfoResult() interface{} {
	return server0.NewAdminServiceQueryTeacherInfoResult()
}

func queryCourseInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*server0.AdminServiceQueryCourseInfoResult)
	success, err := handler.(server0.AdminService).QueryCourseInfo(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAdminServiceQueryCourseInfoArgs() interface{} {
	return server0.NewAdminServiceQueryCourseInfoArgs()
}

func newAdminServiceQueryCourseInfoResult() interface{} {
	return server0.NewAdminServiceQueryCourseInfoResult()
}

func addStudentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.AdminServiceAddStudentArgs)
	realResult := result.(*server0.AdminServiceAddStudentResult)
	success, err := handler.(server0.AdminService).AddStudent(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAdminServiceAddStudentArgs() interface{} {
	return server0.NewAdminServiceAddStudentArgs()
}

func newAdminServiceAddStudentResult() interface{} {
	return server0.NewAdminServiceAddStudentResult()
}

func deleteStudentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.AdminServiceDeleteStudentArgs)
	realResult := result.(*server0.AdminServiceDeleteStudentResult)
	success, err := handler.(server0.AdminService).DeleteStudent(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAdminServiceDeleteStudentArgs() interface{} {
	return server0.NewAdminServiceDeleteStudentArgs()
}

func newAdminServiceDeleteStudentResult() interface{} {
	return server0.NewAdminServiceDeleteStudentResult()
}

func addTeacherHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.AdminServiceAddTeacherArgs)
	realResult := result.(*server0.AdminServiceAddTeacherResult)
	success, err := handler.(server0.AdminService).AddTeacher(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAdminServiceAddTeacherArgs() interface{} {
	return server0.NewAdminServiceAddTeacherArgs()
}

func newAdminServiceAddTeacherResult() interface{} {
	return server0.NewAdminServiceAddTeacherResult()
}

func deleteTeacherHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.AdminServiceDeleteTeacherArgs)
	realResult := result.(*server0.AdminServiceDeleteTeacherResult)
	success, err := handler.(server0.AdminService).DeleteTeacher(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAdminServiceDeleteTeacherArgs() interface{} {
	return server0.NewAdminServiceDeleteTeacherArgs()
}

func newAdminServiceDeleteTeacherResult() interface{} {
	return server0.NewAdminServiceDeleteTeacherResult()
}

func addCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.AdminServiceAddCourseArgs)
	realResult := result.(*server0.AdminServiceAddCourseResult)
	success, err := handler.(server0.AdminService).AddCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAdminServiceAddCourseArgs() interface{} {
	return server0.NewAdminServiceAddCourseArgs()
}

func newAdminServiceAddCourseResult() interface{} {
	return server0.NewAdminServiceAddCourseResult()
}

func deleteCourseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*server0.AdminServiceDeleteCourseArgs)
	realResult := result.(*server0.AdminServiceDeleteCourseResult)
	success, err := handler.(server0.AdminService).DeleteCourse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAdminServiceDeleteCourseArgs() interface{} {
	return server0.NewAdminServiceDeleteCourseArgs()
}

func newAdminServiceDeleteCourseResult() interface{} {
	return server0.NewAdminServiceDeleteCourseResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) QueryStudentInfo(ctx context.Context) (r *server0.AdminQueryStudentInfoResponse, err error) {
	var _args server0.AdminServiceQueryStudentInfoArgs
	var _result server0.AdminServiceQueryStudentInfoResult
	if err = p.c.Call(ctx, "QueryStudentInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryTeacherInfo(ctx context.Context) (r *server0.AdminQueryTeacherInfoResponse, err error) {
	var _args server0.AdminServiceQueryTeacherInfoArgs
	var _result server0.AdminServiceQueryTeacherInfoResult
	if err = p.c.Call(ctx, "QueryTeacherInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryCourseInfo(ctx context.Context) (r *server0.AdminQueryCourseInfoResponse, err error) {
	var _args server0.AdminServiceQueryCourseInfoArgs
	var _result server0.AdminServiceQueryCourseInfoResult
	if err = p.c.Call(ctx, "QueryCourseInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddStudent(ctx context.Context, req *server0.AdminAddStudentInfoRequest) (r *server0.AdminAddStudentInfoResponse, err error) {
	var _args server0.AdminServiceAddStudentArgs
	_args.Req = req
	var _result server0.AdminServiceAddStudentResult
	if err = p.c.Call(ctx, "AddStudent", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteStudent(ctx context.Context, req *server0.AdminDeleteStudentInfoRequest) (r *server0.AdminDeleteStudentInfoResponse, err error) {
	var _args server0.AdminServiceDeleteStudentArgs
	_args.Req = req
	var _result server0.AdminServiceDeleteStudentResult
	if err = p.c.Call(ctx, "DeleteStudent", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddTeacher(ctx context.Context, req *server0.AdminAddTeacherInfoRequest) (r *server0.AdminAddTeacherInfoResponse, err error) {
	var _args server0.AdminServiceAddTeacherArgs
	_args.Req = req
	var _result server0.AdminServiceAddTeacherResult
	if err = p.c.Call(ctx, "AddTeacher", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteTeacher(ctx context.Context, req *server0.AdminDeleteTeacherInfoRequest) (r *server0.AdminDeleteStudentInfoResponse, err error) {
	var _args server0.AdminServiceDeleteTeacherArgs
	_args.Req = req
	var _result server0.AdminServiceDeleteTeacherResult
	if err = p.c.Call(ctx, "DeleteTeacher", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddCourse(ctx context.Context, req *server0.AdminAddCourseInfoRequest) (r *server0.AdminAddCourseInfoResponse, err error) {
	var _args server0.AdminServiceAddCourseArgs
	_args.Req = req
	var _result server0.AdminServiceAddCourseResult
	if err = p.c.Call(ctx, "AddCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCourse(ctx context.Context, req *server0.AdminDeleteCourseInfoRequest) (r *server0.AdminDeleteCourseInfoResponse, err error) {
	var _args server0.AdminServiceDeleteCourseArgs
	_args.Req = req
	var _result server0.AdminServiceDeleteCourseResult
	if err = p.c.Call(ctx, "DeleteCourse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
